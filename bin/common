#
# Common functions and variables
#

# Configure these to taste.

# ...

# No user-serviceable parts below this point.

NAME=duplicacy-scripts

WHEREAMI=$(dirname $0)
WHOAMI=$(basename $0)

TOP=$(cd "${WHEREAMI}/.." && pwd -P)
PREFS="${TOP}/prefs"
PREFERENCES=${PREFS}/preferences
BIN="${TOP}/bin"
ETC="${TOP}/etc"
LIB="${TOP}/lib"
VAR="${TOP}/var"



LOG="${VAR}/log"
mkdir -p "${LOG}"

HOLE="${VAR}/hole"
mkdir -p "${HOLE}"

CACHE="${VAR}/cache"
mkdir -p "${CACHE}"

PATH=${BIN}:${PATH}


# Read the settings file if it exists
[ -e "${ETC}/settings" ] && . "${ETC}/settings"

# Exit with an error
die()
{
    echo "$@" 1>&2
    exit 1
}


# Determine if this host should do maintenance
do_maint()
{
    if [ -z "${CONFIG_NO_MAINT}" ]
    then
	return 0
    else
	return 1
    fi
    die "Not reached."
}


# Run a duplicacy command from the right place
duplicacy_cmd()
{
    [ -h "${TOP}/root" ] \
	|| die "Can't find backup root"

    (cd "${TOP}/root" && duplicacy "$@")
}


# Return the command-line switch for the bandwidth limit if one is
# configured.
limit_rate()
{
    if echo "${CONFIG_BANDWIDTH}" | egrep -q -e '^([0-9]+)?$'
    then
	if [ -n "${CONFIG_BANDWIDTH}" ]
	then
	    echo "-limit-rate" "$((${CONFIG_BANDWIDTH} * 1000 / 8))"
	fi
    else
	die "Invalid configured bandwidth '${CONFIG_BANDWIDTH}'"
    fi
}


#
# Run a program and log the output
#
# Args:
#  1 - Log file name tag (e.g. "backup" or "prune")
#  2+- Program name and arguments
#
log()
{
    TAG=$1
    shift

    TIMESTAMP=$(date +"%Y-%m-%dT%H:%M:%S")
    OUT_LOG="${LOG}/$(date +"%Y-%m-%dT%H:%M:%S")-${TAG}"

    echo "START ${TAG} at $(date)" > "${OUT_LOG}"
    echo >> "${OUT_LOG}"
    echo "Running $@" >> "${OUT_LOG}"
    echo >> "${OUT_LOG}"

    if [ -t 1 ]
    then

	# Build the output separately because the shell doesn't always flush.
	LOG_BUILD="${HOLE}/log-build.$$"

	# Exit status catcher from
        # https://unix.stackexchange.com/a/70675/15184
	(((("$@" 2>&1 ; echo $? >&3) >&4) 3>&1) | (read xs; exit $xs)) > "${LOG_BUILD}" 4>&1 
	STATUS=$?
	PRODUCE_ON_STDERR=true

	cat "${LOG_BUILD}" >> "${OUT_LOG}"
	rm -f "${LOG_BUILD}"

    else

	"$@" 2>&1 >> "${OUT_LOG}"
	STATUS=$?
	PRODUCE_ON_STDERR=false

    fi

    echo >> "${OUT_LOG}"
    echo "Exited ${STATUS}" >> "${OUT_LOG}"
    echo >> "${OUT_LOG}"
    echo "END ${TAG} at $(date)" >> "${OUT_LOG}"

    ${PRODUCE_ON_STDERR} && cat "${OUT_LOG}" 1>&2
}



#
# Utilities
#

# Exit nicely if a backup is already in progress
avoid_running_backup()
{
    RUNNING_PID=$( \
	ps -e -o pid,args \
	| egrep -e ' duplicacy .* backup ' \
	| awk '$2 == "duplicacy" { print $1 }'
        )

    if [ -n "${RUNNING_PID}" ]
    then
        echo "Backup is already running, PID ${RUNNING_PID}"
        exit 0
    fi
}


# Get a list of the storage names in the preferences.

# TODO: This is highly dependent on the formatting of the file, which
#  is JSON and shouldn't matter.

list_storage_names()
{
    < "${PREFERENCES}" \
      egrep -e '"name":\s*"[^"]+"' \
      | sed -e 's/^.*"name":\s*"\([^"]*\)".*$/\1/'
}



# Get a list of the revision dates and numbers in a machine-readable
# format.

# Args:
#  1 - Snapshot
#  2 - Storage (Optional)

list_revisions()
{
    local SNAPSHOT="$1"
    local OPT=
    [ -n "$2" ] && OPT="--storage $2"
    duplicacy_cmd list --id "${SNAPSHOT}" ${OPT}\
	| egrep -e '^Snapshot ' \
	| awk '{ printf "%sT%s %s\n", $7, $8, $4 }'
}


# Return a dry-run argument if we're configured for that.
dry_run_arg()
{
    if [ -n "${CONFIG_DRY_RUN}" ]
    then
	echo '-dry-run'
    fi
}

# See if the variable named in $1 is enabled
is_enabled()
{
    VALUE=$(eval echo "\$$1")
    [ -n "${VALUE}" ] || VALUE=no

    case $(echo "${VALUE}" | tr A-Z a-z) in
	0|false|no)
	    return 1
	    ;;
	1|true|yes)
	    return 0
	    ;;
	*)
	    die "Don't understand '$1' value of '${VALUE}'"
	    ;;
	    
    esac
}


# Exit if CONFIG_SKIP_CRON_JOBS is set
exit_if_no_cron()
{
    if is_enabled CONFIG_SKIP_CRON_JOBS
    then
	exit 0
    fi
}
